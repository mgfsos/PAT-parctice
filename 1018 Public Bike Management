#include<iostream>
#include<vector>
#include<string>
#include<cstdio>
using namespace std;
const int inf=999999;

int cmax,n,sp,m;//最大容量，n个点，出问题的点，路的条数
int minNeed=inf,minBack=inf;//最小的需要数，最小的归还数
int e[510][510],dis[510],weight[510];
bool visit[510];
vector<int> pre[510];// 每个顶点向下一个顶点，可能存在多个选择
vector<int> path,tmppath;
void dfs(int v)
{
    tmppath.push_back(v);//加入sp
    if(v==0)//深搜到源，计算该路径的need和path
    {
        int need=0,back=0;
        for(int i=tmppath.size()-1;i>=0;i--)//注意，从调配中心出发，往sp走，不能弄反了，应为back会和need抵消
        {
            int id=tmppath[i];
            if(weight[id]>0)//车多了
            {
                back+=weight[id];
            }
            else if(back>(0-weight[id]))//还要补的车少于已经多出的车
            {
                back+=weight[id];
            }else//需要从中心补给
            {
                need+=((0-weight[id])-back);
                back=0;
            }
        }//计算完了该路径的need和back
        if(need<minNeed)
        {
            minNeed=need;
            minBack=back;
            path=tmppath;
        }else if(need==minNeed&&back<minBack)
        {
            minBack=back;
            path=tmppath;
        }

    }
    for(int i=0;i<pre[v].size();i++)
    {
        dfs(pre[v][i]);
    }
    tmppath.pop_back();//深度优先的返回操作
        return ;
}
int main()
{
    /*
        注意下面连个fill用法的区别：
        e是二维数组，要用e[0],e[0]+m*n
        dis是一维数组，所以用dis，dis+n
    */
    fill(e[0],e[0]+510*510,inf);
    fill(dis,dis+510,inf);//初始化dis[]
    scanf("%d%d%d%d",&cmax,&n,&sp,&m);
    for(int i=1;i<=n;i++)//输入点的车数
    {
        scanf("%d",&weight[i]);//输入的是有多少辆车，可以直接转换成所需的信息
        weight[i]=weight[i]-cmax/2;
    }
    for(int i=0;i<m;i++)//输入边
    {
        int a,b;
        scanf("%d%d",&a,&b);
        scanf("%d",&e[a][b]);
        e[b][a]=e[a][b];
    }
    dis[0]=0;//迪杰斯特拉
    for(int i=0;i<=n;i++)
    {
        /*   设置一个u，使的当所有点都加入后退出
            其次u还能起到将j带出的作用，用于下面的更新

         */
        int u=-1,minf=inf;
        for(int j=0;j<=n;j++)//c从未选的集合里选一个最近的加入
        {
            if(visit[j]==false&&dis[j]<minf)
            {
                minf=dis[j];
                u=j;
            }
        }
        
        visit[u]=true;
        for(int v=0;v<=n;v++)//通过找到的当前这一点，更新dis
        {
            if(e[v][u]+dis[u]<dis[v])
            {
                dis[v]=e[v][u]+dis[u];
                /*
                    pre[v]记录的是从最短路径上，到达该节点的前一个节点
                    当u==v时，会把自己加入
                */
                pre[v].clear();
                pre[v].push_back(u);
            }
            else if(dis[v]==e[v][u]+dis[u])
            {
                pre[v].push_back(u);
            }
        }

    }//迪杰斯特拉结束
    dfs(sp);
    /*
        经过dfs(sp);相当于遍历了一颗以sp为根，所有叶节点都是 调配中心的树
    */
    printf("%d 0", minNeed);
	for (int i = path.size() - 2; i >= 0; i--)
		printf("->%d", path[i]);
	printf(" %d", minBack);
	return 0;
}
